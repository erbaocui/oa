<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinkgem.jeesite.modules.income.dao.AccountFlowDao">
    
	<sql id="accountFlowColumns">
		a.id AS "id",
		a.value AS "value",
		a.type AS "type",
		a.create_date AS "createDate",
		a.create_by AS "createBy.id",
		a.account AS "account.account",
		b.name AS "account.name",
		a.income_id AS "incomeId",
		c.name AS "contract.name"

	</sql>
	
	<sql id="accountFlowJoins">
		left join  bm_account b on a.account=b.account
		left join  bm_income  i on i.id=a.income_id
		left join  bm_contract c on c.id=i.contract_id
		LEFT JOIN  sys_office o ON o.id = b.office_id
		LEFT JOIN sys_user u ON u.id = a.create_by
	</sql>
    
	<select id="get" resultType="AccountFlow">
		SELECT 
			<include refid="accountFlowColumns"/>
		FROM bm_account_flow a
		<include refid="accountFlowJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="AccountFlow">
		SELECT 
			<include refid="accountFlowColumns"/>
		FROM bm_account_flow a
		<include refid="accountFlowJoins"/>
		<where>
			<if test="beginDate != null and beginDate  !='' " >
				create_date >= #{beginDate}
			</if>
			<if test="endDate != null and endDate !='' " >
				<![CDATA[
				and create_date <= #{endDate}
				]]>
			</if>
			${sqlMap.dsf}
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="AccountFlow">
		SELECT 
			<include refid="accountFlowColumns"/>
		FROM bm_account_flow a
		<include refid="accountFlowJoins"/>
		<where>
			
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO bm_account_flow(
			id,
			value,
			type,
			create_date,
			create_by,
			income_id,
			remarks
		) VALUES (
			#{id},
			#{value},
			#{type},
			#{createDate},
			#{createBy.id},
			#{incomeId},
			#{remarks}
		)
	</insert>

	<insert id="insertBatch" parameterType="java.util.List">
		INSERT INTO bm_account_flow(
		id,
		value,
		type,
		create_date,
		create_by,
		income_id,
		account

		) VALUES
		<foreach collection="accountFlowList" item="item" index="index" separator=",">
			(
			#{item.id},
			#{item.value},
			#{item.type},
			#{item.createDate},
			#{item.createBy.id},
			#{item.incomeId},
			#{item.account.account}

			)
		</foreach>
	</insert>
	
	<update id="update">
		UPDATE bm_account_flow SET 	
			value = #{value},
			type = #{type},
			create_time = #{createTime},
			income_id = #{incomeId},
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		DELETE FROM bm_account_flow
		WHERE id = #{id}
	</update>
	
</mapper>